#+OPTIONS: toc:nil

* Simmilar Lines (/pol. Wierszarz/)
  
  *Individual Programming Task  2021* small task at the university of Warsaw.
  
  Task description in the [[file:task.org][task.org]] file (in Polish).

  Furher polish description of the project below.  

** RIDMI z ~main.c~   
***** Wierszarz, Grzegorz Cichosz, marzec 2021

*** RIDMI
    Program dzieli się na kilka kroków i zagnieżdżonych podkroków. Te główne są dość dobrze wyróżnione
    w mainie.
    
**** MODUS OPERANDI
     - inicjalizacja tablicy dynamicznej rodem z modułu *array* przechowującej sparsowany tekst
     - wczytanie tekstu z stdinu (moduł *input*)
       + moduł *input* woła bezpośrednio po każdej linii ze stdinu moduł *parse* i jegoż funkcję
         *parse_line*, która próbuje wczytać słowa z wiersza do wspomnianej tablicy
     - moduł *group* i funkcja *write_groups* znajdują grupy podobnych i wypluwają na stdout
       + każda linia ma tablicę swoich słów -- *group* sortuje linie wewnątrz nich samych, aby
         podobne miały identyczne tablicowe reprezentacje
       + następnie sortowanie wszystkich linii po tychże tablicach wewnętrznych, aby z tej postaci
         wyłuskać duplikaty (tj podobne wiersze)
         - wszelkie sortowanie wymaga funkcji porządkujących z modułu *compare*

****   ZŁOŻONOŚĆ
     Ze względu na wspomniane sortowania złożoność można szacować asymptotą od góry /O/ (/k/ log /k/),
     gdzie /k/ to liczba znaków na wejściu.

       ---------------------   
** Opis szczegółowszy
*** Use
    Kompilacja za pomocą ~make~.

*** struktura
    
**** Pliki źródłowe
     Wszystkie składuję w katalogu ~src~
***** ~array~ -- tablice dynamiczne
      - [[file:src/array.h][array.h]]
      - [[file:src/array.c][array.c]]
***** ~input~ -- wczytywanie
      - [[file:src/input.h][input.h]]
      - [[file:src/input.c][input.c]]
***** ~parse~ -- parsowanie
      - [[file:src/parse.h][parse.h]]
      - [[file:src/parse.c][parse.c]]
***** ~group~ -- znajdywanie grup podobnych wierszy i ich wypis
      - [[file:src/group.h][group.h]]
      - [[file:src/group.c][group.c]]
***** ~compare~ -- komparatory przydatne do kwik sortu w ~group~
      - [[file:src/compare.h][compare.h]]
      - [[file:src/compare.c][compare.c]]
***** ~main~ -- wszystko w całość
      - [[file:src/main.c][main.c]]

**** skrypt testujący
     [[file:test.sh][test.sh]]

     Użytek: ~\test.sh prog dir~ -- użyje execa ~prog~ na wszystkich plikach z ~dir/*.in~ i porówna
     wyjście z ~dir/*.out~ oraz /wyjście diagnostyczne/ z ~dir/*.err~. Przeprowadzi też dyskretny
     test na /czystość pamięciową/ za pomocą wałgrynda.

     Jako przykłady plikow testowych mogą służyć [[file:tests/podobnawe_wiersze.in][podobnawe_wiersze.*]] 

**** makefile
     [[file:Makefile][Makefile]]
     
**** części własne do ułatwienia pisanie
     
***** katalog ~tests/~ z testami
      mojego autorstwa ~podobnawe_wiersze~ oraz plik ~failloc.h~ do testów zachowania programu w
      razie błędu krytycznego (tj. braku pamięci)

      Prócz tego korzystałem z testów spółdzielczych [[https://gitlab.com/mimuw-ipp-2021/male-zadanie][z tego repozytorium]]

***** ~sync~ i ~tarruj~
      dwa proste shell scripty, jeden do wrzucania na students, a drugi do tworzenia pliku smoła.gz
      z rozwiązaniem

      
